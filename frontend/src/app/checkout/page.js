"use client";
import React, { useState, useEffect, Suspense, useCallback } from "react";
import { useRouter } from "next/navigation"; // For redirecting after success
import Link from "next/link";
import Container from "react-bootstrap/Container";
import Row from "react-bootstrap/Row";
import Col from "react-bootstrap/Col";
import Card from "react-bootstrap/Card";
import ListGroup from "react-bootstrap/ListGroup"; // For order summary
import Form from "react-bootstrap/Form";
import Button from "react-bootstrap/Button";
import Spinner from "react-bootstrap/Spinner";
import Alert from "react-bootstrap/Alert";
import { useAuth } from "@/contexts/AuthContext";

// Helper function (same as cart page)
const formatDisplayDateTime = (isoDateStr, isoTimeStr) => {
  const datePart = isoDateStr
    ? new Date(isoDateStr + "T00:00:00Z").toLocaleDateString("en-GB", {
        timeZone: "UTC",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
      })
    : null;
  const timePart = isoTimeStr || "";
  if (datePart && timePart) return `${datePart} ${timePart}`;
  if (isoDateStr && isoDateStr.includes("T")) {
    try {
      const d = new Date(isoDateStr);
      if (!isNaN(d.getTime()))
        return d.toLocaleString("en-GB", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
          hour12: false,
        });
    } catch (e) {}
  }
  if (datePart) return datePart;
  return "N/A";
};

// --- Main Component Content ---
function CheckoutPageContent() {
  const [cartItems, setCartItems] = useState([]);
  const [totalPrice, setTotalPrice] = useState(0);
  const [loadingCart, setLoadingCart] = useState(true);
  const [error, setError] = useState(null); // For fetch/general errors
  const { fetchCartCount } = useAuth(); // To update navbar count after checkout

  // Billing Form State
  const [customerName, setCustomerName] = useState("");
  const [customerEmail, setCustomerEmail] = useState("");
  // --- WARNING: Storing raw card details in state is NOT secure for production! ---
  // --- Use a Payment Gateway (Stripe Elements, etc.) instead ---
  const [cardNumber, setCardNumber] = useState("");
  const [expiryDate, setExpiryDate] = useState(""); // Example: MM/YY
  const [cvv, setCvv] = useState("");
  // --- End Warning ---

  // Submission State
  const [isProcessing, setIsProcessing] = useState(false);
  const [paymentError, setPaymentError] = useState(null);
  const [paymentSuccess, setPaymentSuccess] = useState(false);
  const [orderNumber, setOrderNumber] = useState("");

  const router = useRouter();

  // Fetch cart data on load
  const fetchCart = useCallback(async () => {
    setLoadingCart(true);
    setError(null);
    setPaymentSuccess(false); // Reset success on load
    try {
      const response = await fetch(`/api/cart`, {
        credentials: "include",
      });
      const data = await response.json();
      if (!response.ok)
        throw new Error(
          data.error || `Error fetching cart (${response.status})`
        );
      setCartItems(data.items || []);
      setTotalPrice(data.totalPrice || 0);
      if (!data.items || data.items.length === 0) {
        setError("Your cart is empty. Please add flights before checking out.");
      }
    } catch (err) {
      setError(err.message || "Failed to load cart data.");
      setCartItems([]);
      setTotalPrice(0);
    } finally {
      setLoadingCart(false);
    }
  }, []);

  useEffect(() => {
    fetchCart();
  }, [fetchCart]);

  // Handle Checkout Submission
  const handleConfirmPurchase = async (event) => {
    event.preventDefault();
    setIsProcessing(true);
    setError(null);
    setPaymentError(null);
    setPaymentSuccess(false);

    // --- WARNING: Replace this with Payment Gateway tokenization ---
    // In a real app, you would get a paymentMethodId or token from Stripe Elements/etc. here
    // instead of using the raw card details from state.
    const checkoutData = {
      customerName,
      customerEmail,
      // DO NOT SEND RAW CARD DETAILS TO YOUR BACKEND
      // Instead, send a token/ID generated by the payment provider's library
      paymentMethodToken: `tok_simulated_${Date.now()}`, // Example simulated token
      // You might also send cart summary/total for server-side validation
      // expectedTotal: totalPrice,
      // items: cartItems.map(item => ({ flightId: item.id, quantity: item.quantity }))
    };
    // --- End Warning ---

    try {
      const response = await fetch(`/api/checkout/confirm`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include", // Important for session cart clearing
        body: JSON.stringify(checkoutData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || `Checkout failed (${response.status})`);
      }

      // --- Purchase Successful ---
      setPaymentSuccess(true);
      setOrderNumber(data.orderNumber || ""); // Get order number from response
      setSuccessMessage(data.message || "Purchase confirmed!"); // Display success message
      fetchCartCount(); // Update navbar cart count (should be 0)
      // Optionally redirect after delay
      // setTimeout(() => router.push('/order-confirmation?order=' + data.orderNumber), 3000);
    } catch (err) {
      console.error("Checkout failed:", err);
      setPaymentError(err.message || "Checkout failed. Please try again.");
    } finally {
      setIsProcessing(false);
    }
  };

  // --- Render Logic ---
  if (loadingCart) {
    return (
      <Container className="text-center p-5">
        <Spinner animation="border" />
        <p>Loading Cart...</p>
      </Container>
    );
  }

  // Show generic error or empty cart message before rendering form
  if (error) {
    return (
      <Container className="py-5">
        <Alert variant="danger">{error}</Alert>
      </Container>
    );
  }
  if (cartItems.length === 0 && !paymentSuccess) {
    // Don't show empty message if payment just succeeded
    return (
      <Container className="py-5 text-center">
        <Alert variant="info">
          Your cart is empty. <Link href="/">Browse flights</Link>
        </Alert>
      </Container>
    );
  }

  return (
    <Container className="py-4 py-md-5">
      <header className="text-center mb-5">
        <h1 className="display-5 text-uppercase fw-bold">Checkout</h1>
      </header>

      {/* Show success message after purchase */}
      {paymentSuccess && (
        <Alert variant="success">
          <h4>Purchase Successful!</h4>
          <p>{successMessage}</p>
          {orderNumber && (
            <p>
              Your Order Number: <strong>{orderNumber}</strong>
            </p>
          )}
          <hr />
          <Link href="/">Return Home</Link>
        </Alert>
      )}

      {/* Show checkout form only if purchase isn't completed */}
      {!paymentSuccess && (
        <Row className="justify-content-center">
          <Col lg={7} md={8}>
            <Card className="shadow-sm mb-4">
              <Card.Header as="h3" className="h5 text-center py-3">
                Order Summary
              </Card.Header>
              <ListGroup variant="flush">
                {cartItems.map((item) => (
                  <ListGroup.Item
                    key={item.id}
                    className="d-flex justify-content-between align-items-start flex-wrap"
                  >
                    <div className="me-auto">
                      <div className="fw-bold">
                        {item.flightName} ({item.code || item.id})
                      </div>
                      <small className="text-muted d-block">
                        {item.origin} &rarr; {item.destination}
                      </small>
                      <small className="text-muted d-block">
                        Depart:{" "}
                        {formatDisplayDateTime(
                          item.departureDate,
                          item.departureTime
                        )}
                      </small>
                    </div>
                    <span className="text-nowrap fw-bold ms-3">
                      {item.quantity} x ${item.price?.toFixed(2)}
                    </span>
                  </ListGroup.Item>
                ))}
                <ListGroup.Item className="d-flex justify-content-between fw-bold">
                  <span>Total Price:</span>
                  <span>${totalPrice.toFixed(2)}</span>
                </ListGroup.Item>
              </ListGroup>
            </Card>
          </Col>
          <Col lg={5} md={8}>
            <Card className="shadow-sm">
              <Card.Header as="h3" className="h5 text-center py-3">
                Billing Information
              </Card.Header>
              <Card.Body>
                {paymentError && (
                  <Alert
                    variant="danger"
                    onClose={() => setPaymentError(null)}
                    dismissible
                  >
                    {paymentError}
                  </Alert>
                )}
                <Form onSubmit={handleConfirmPurchase}>
                  <Form.Group className="mb-3" controlId="customerName">
                    <Form.Label>Full Name</Form.Label>
                    <Form.Control
                      type="text"
                      value={customerName}
                      onChange={(e) => setCustomerName(e.target.value)}
                      required
                      disabled={isProcessing}
                    />
                  </Form.Group>
                  <Form.Group className="mb-3" controlId="customerEmail">
                    <Form.Label>Email Address</Form.Label>
                    <Form.Control
                      type="email"
                      value={customerEmail}
                      onChange={(e) => setCustomerEmail(e.target.value)}
                      required
                      disabled={isProcessing}
                    />
                  </Form.Group>

                  {/* --- Payment Section - Replace with Payment Gateway Element --- */}
                  <h5 className="mt-4 mb-3 fs-6">
                    Payment Details (Simulation Only)
                  </h5>
                  <Alert variant="warning" className="small">
                    <strong className="d-block mb-1">Security Warning:</strong>
                    Do not enter real credit card details here. This form is for
                    demonstration only. Use a secure payment provider like
                    Stripe Elements in production.
                  </Alert>
                  <Form.Group className="mb-3" controlId="cardNumber">
                    <Form.Label>Card Number</Form.Label>
                    <Form.Control
                      type="text"
                      placeholder="xxxx xxxx xxxx xxxx"
                      value={cardNumber}
                      onChange={(e) => setCardNumber(e.target.value)}
                      required
                      disabled={isProcessing}
                    />
                  </Form.Group>
                  <Row>
                    <Col>
                      <Form.Group className="mb-3" controlId="expiryDate">
                        <Form.Label>Expiry (MM/YY)</Form.Label>
                        <Form.Control
                          type="text"
                          placeholder="MM/YY"
                          value={expiryDate}
                          onChange={(e) => setExpiryDate(e.target.value)}
                          required
                          disabled={isProcessing}
                        />
                      </Form.Group>
                    </Col>
                    <Col>
                      <Form.Group className="mb-3" controlId="cvv">
                        <Form.Label>CVV</Form.Label>
                        <Form.Control
                          type="text"
                          placeholder="123"
                          value={cvv}
                          onChange={(e) => setCvv(e.target.value)}
                          required
                          disabled={isProcessing}
                        />
                      </Form.Group>
                    </Col>
                  </Row>
                  {/* --- End Payment Section --- */}

                  <div className="d-grid mt-4">
                    <Button
                      variant="primary"
                      type="submit"
                      disabled={isProcessing || cartItems.length === 0}
                    >
                      {isProcessing ? (
                        <>
                          <Spinner as="span" size="sm" /> Processing...
                        </>
                      ) : (
                        "Confirm Purchase"
                      )}
                    </Button>
                  </div>
                </Form>
              </Card.Body>
            </Card>
          </Col>
        </Row>
      )}
    </Container>
  );
}

// --- Main Page Component Wrapper ---
export default function CheckoutPage() {
  return (
    <Suspense
      fallback={
        <div className="text-center p-5">
          <Spinner animation="border" /> Loading Checkout...
        </div>
      }
    >
      <CheckoutPageContent />
    </Suspense>
  );
}

// Add required CSS if needed
/*
.cart-background { ... } // Define if needed
.checkout-container { ... } // Define if needed
.order-summary-item { ... } // Use ListGroup instead
*/
